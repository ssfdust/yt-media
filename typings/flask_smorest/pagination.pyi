import marshmallow as ma
from .compat import MARSHMALLOW_VERSION_MAJOR as MARSHMALLOW_VERSION_MAJOR
from .utils import unpack_tuple_response as unpack_tuple_response
from flask_smorest.pagination import PaginationParameters as PaginationParameters
from marshmallow.schema import SchemaMeta as SchemaMeta
from typing import Any, Callable, Dict, List, Optional, Union

class PaginationParameters:
    page: Any = ...
    page_size: Any = ...
    item_count: Any = ...
    def __init__(self, page: int, page_size: int) -> None: ...
    @property
    def first_item(self) -> int: ...
    @property
    def last_item(self) -> int: ...

class Page:
    collection: Any = ...
    page_params: Any = ...
    def __init__(
        self,
        collection: Union[List[Dict[str, int]], List[int], range],
        page_params: PaginationParameters,
    ) -> None: ...
    @property
    def items(self) -> Union[List[Dict[str, int]], List[int]]: ...
    @property
    def item_count(self) -> int: ...

class PaginationHeaderSchema(ma.Schema):
    total: Any = ...
    total_pages: Any = ...
    first_page: Any = ...
    last_page: Any = ...
    page: Any = ...
    previous_page: Any = ...
    next_page: Any = ...
    class Meta:
        ordered: bool = ...

class PaginationMixin:
    PAGINATION_ARGUMENTS_PARSER: Any = ...
    PAGINATION_HEADER_FIELD_NAME: str = ...
    DEFAULT_PAGINATION_PARAMETERS: Any = ...
    PAGINATION_HEADER_DOC: Any = ...
    def paginate(
        self,
        pager: Optional[type] = ...,
        *,
        page: Optional[int] = ...,
        page_size: Optional[int] = ...,
        max_page_size: Optional[int] = ...
    ) -> Callable: ...
