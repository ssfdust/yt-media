from apispec import BasePlugin
from apispec.core import APISpec as APISpec
from collections import OrderedDict
from typing import Any, Dict, List, Optional, Union
from werkzeug.routing import Rule

RE_URL: Any
DEFAULT_CONVERTER_MAPPING: Any
DEFAULT_TYPE: Any

class FlaskPlugin(BasePlugin):
    converter_mapping: Any = ...
    openapi_version: Any = ...
    def __init__(self) -> None: ...
    def init_spec(self, spec: APISpec) -> None: ...
    @staticmethod
    def flaskpath2openapi(path: str) -> str: ...
    def register_converter(
        self, converter: type, conv_type: str, conv_format: Optional[str] = ...
    ) -> None: ...
    def rule_to_params(self, rule: Rule) -> List[Dict[str, Any]]: ...
    def path_helper(
        self,
        rule: Rule,
        operations: OrderedDict[str, Any],
        parameters: List[Union[Dict[str, str], str]],
        **kwargs: Any
    ) -> str: ...
